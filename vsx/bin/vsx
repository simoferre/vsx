#!/usr/bin/python
# -*- coding: utf-8 -*-
"""CLI for VSX

Usage:
  vsx info [ <guest> ]
  vsx mask show <guest>
  vsx mask (set | rm) <guest> [ <host> ]
  vsx snap show [ <guest> ]

  vsx (-h | --help)
  vsx --version

Options:
  -h --help     Show this screen.
  --version     Show version.

Try:
  vsx mask set bmdw

"""
import libvirt
import os

from vsx import config
from vsx import VSX
from docopt import docopt
from lxml import etree


# override libvirt's default error handler
def errorHandler(ctx, err):
    pass


libvirt.registerErrorHandler(errorHandler, None)

storage = VSX()


COLORS = {
    'black': '0;30', 'dark gray': '1;30',
    'blue': '0;34', 'light blue': '1;34',
    'green': '0;32', 'light green': '1;32',
    'cyan': '0;36', 'light cyan': '1;36',
    'red': '0;31', 'light red': '1;31',
    'purple': '0;35', 'light purple': '1;35',
    'brown': '0;33', 'yellow': '1;33',
    'light gray': '0;37', 'white': '1;37',
}


FLAGS = {
    'live': libvirt.VIR_MIGRATE_LIVE,
    'persistent': libvirt.VIR_MIGRATE_PERSIST_DEST,
    'undefinesource': libvirt.VIR_MIGRATE_UNDEFINE_SOURCE
}


def colored(string, color):
    """
    Fancy terminal color
    """
    return "\x1b[%sm%s\x1b[0m" % (COLORS[color], string)


def luns(dom):
    """Xpath query to retrieve instance's disks from XML
    """

    if isinstance(dom, libvirt.virDomain):
        dom = dom.XMLDesc(0)

    tree = etree.fromstring(dom)
    devices = []

    for disk in tree.xpath("/domain/devices/disk[@device='disk']"):

        try:
            devices.append(disk.xpath("source/@dev")[0])
        except IndexError:
            pass

    return [os.path.basename(dev).strip('e') for dev in devices]


def guests(host, guest=None):
    """Return a guestlist for a host
    """

    conn = libvirt.open("qemu+ssh://root@%s/system" % host)

    if guest:
        try:
            return [conn.lookupByName(guest), ]
        except libvirt.libvirtError, err:
            return []
    else:
        return [conn.lookupByID(did) for did in conn.listDomainsID()]


def _maskinfo(macset, exclude=None):
    """Return a list of hosts masking the lun
    """
    hostnames = []

    for host in config.HOSTS:
        if set(storage.hwaddr(host)).issubset(macset):
            if not exclude or host != exclude:
                hostnames.append(host)

    return hostnames


def mask(action, guest, host=None):
    """Set/remove appropriate masks to given host
    finding out the host it is running on
    """
    for hst in config.HOSTS:
        for dom in guests(hst, guest):

            if dom.isActive():
                lvs = []
                for lun in luns(dom):
                    lun = storage.lu(lun=lun)
                    lvs.append(lun["name"])

                    # 1. Se non ha i mask sull'host su cui e` attivo
                    #    non possiamo mascherare un altro host.
                    # 2. Se ha i mask su un altro host non possiamo
                    #    smascherare su quello attivo.
                    if action == 'setmask':
                        if not lun["masks"] and host:
                            host = [hst, host]

                    elif action == 'rmmask':
                        try:
                            other_masked_mac = set(lun["masks"]).difference(
                                set(storage.hwaddr(hst)))
                        except TypeError:
                            print "No mask defined on guest %s" % guest
                            exit(1)

                        if other_masked_mac:

                            if not host or host == hst:
                                hosts_to_unmask = _maskinfo(other_masked_mac,
                                                            exclude=hst)

                                if len(hosts_to_unmask) >= 1:
                                    hosts_to_unmask.append(hst)
                                    host = hosts_to_unmask

                host_to_mask = host and host or hst

                if type(host_to_mask) == list:
                    return getattr(storage, action)(lvs,
                                                    serverlist=host_to_mask)
                if type(host_to_mask) == str:
                    return getattr(storage, action)(lvs,
                                                    server=host_to_mask)

                return None

    return None


def snap(guest=None):
    """Snapsched info.
    """

    for host in config.HOSTS:
        for dom in guests(host, guest):
            print "\n%s" % colored(dom.name().upper(), "red")

            for lun in luns(dom):
                lu = storage.lu(lun=lun)

                snapscheds = lu["snapScheds"] or []

                print "%s: %s" % (colored(lu["name"], "yellow"),
                                  ', '.join([sched["stringRep"]
                                             for sched in snapscheds]))


def info(guest=None):
    """Print guest info to standard output.

    @param guest: the guest to represent.
                  all guests if None.
    """

    for host in config.HOSTS:
        doms = guests(host, guest)

        if doms:
            print colored(host.upper(), "light red")

        for dom in doms:
            printguest(dom)


def printmask(guest):
    """Print maskinfo
    """
    for host in config.HOSTS:
        for dom in guests(host, guest):
            for lun in luns(dom):
                try:
                    hostlist = _maskinfo(set(storage.lu(lun=lun)["masks"]))
                except TypeError:
                    print "No mask defined on guest %s" % guest
                    exit(1)

                if hostlist:
                    print "%s: %s" % (colored(lun, 'white'),
                                      colored(', '.join(hostlist), 'red'))


def printguest(dom):
    """Print a guest
    """

    persistent = dom.isPersistent and 'P' or 'N'
    active = dom.isActive() and 'A' or 'I'

    lus = luns(dom)

    strlv = ''
    for lun in lus:
        lu = storage.lu(lun=lun)
        mask = '!', 'red'
        if lu['masks']:
            mask = '#', 'green'

        strlv += "%s(%s%s) " % (colored(lu["name"], 'white'),
                                colored(mask[0], mask[1]),
                                lu[u'snapshotCount'])

    strlu = ' '.join(lus)
    print " {0:1} {1:1} {2:26} {3:41} {4:40}".format(
        persistent,
        active,
        colored(dom.name(), 'light green'),
        strlu,
        strlv)


def printresp(resp):
    """Represent HTTP response
    """

    config_state = {
        "completedSuccessfully": "Completed successfully",
        "completedFailed": "Failed:"}

    js = resp.json()
    print config_state[js["configState"]], js["message"]


def main():
    """The main program
    """

    arguments = docopt(__doc__, version='CLI for VSX 0.1a')

    if arguments["info"]:
        info(arguments["<guest>"])
    elif arguments["mask"]:
        if arguments["show"]:
            printmask(arguments["<guest>"])
            exit(0)

        action = lambda x: (x['set'] and 'setmask' or
                            x['rm'] and 'rmmask')

        guest = arguments["<guest>"]
        host = arguments["<host>"] and arguments["<host>"] or None
        resp = mask(action(arguments), guest, host)

        if None == resp:
            print "No LV %s defined" % arguments["<guest>"]
            exit(1)

        printresp(resp)
    elif arguments["snap"]:
        snap(arguments["<guest>"])

if __name__ == '__main__':
    main()
